using System;

namespace ReCommendedExtension.Tests.test.data
{
    public class Simple
    {
        string nonNullableReference;
        string? nullableReference;

        int nonNullableValue;
        int? nullableValue;

        void NullCheck()
        {
            if (|nonNullableReference != null|(0)) { }
            if (nullableReference != null) { }
            if (||nonNullableValue != null|(1)|(2)) { }
            if (nullableValue != null) { }
        }

        void AssigningNull()
        {
            nonNullableReference = |null|(3);
            nullableReference = null;
            nonNullableValue = default;
            nullableValue = default;
        }

        void AssigningNonNullable()
        {
            nullableReference = nonNullableReference;
            nullableValue = nonNullableValue;
        }

        void AssigningNullable()
        {
            nonNullableReference = |nullableReference|(4);
        }

        void Dereferencing()
        {
            Console.WriteLine(nonNullableReference.Length);
            Console.WriteLine(|nullableReference|(5).Length);
            Console.WriteLine(nonNullableValue.ToString());
            Console.WriteLine(nullableValue.ToString());
        }
    }

    class Generic<T>
    {
        T nonNullable;
        |T?|(6) nullable;

        void NullCheck()
        {
            if (nonNullable != null) { }
        }

        void AssigningNull()
        {
            nonNullable = default;
        }

        void Dereferencing()
        {
            Console.WriteLine(|nonNullable|(7).ToString());
        }
    }

    class GenericForReference<T> where T : class
    {
        T nonNullableReference;
        T? nullableReference;

        void NullCheck()
        {
            if (|nonNullableReference != null|(8)) { }
            if (nullableReference != null) { }
        }

        void AssigningNull()
        {
            nonNullableReference = |null|(9);
            nullableReference = null;
        }

        void AssigningNonNullable()
        {
            nullableReference = nonNullableReference;
        }

        void AssigningNullable()
        {
            nonNullableReference = |nullableReference|(10);
        }

        void Dereferencing()
        {
            Console.WriteLine(nonNullableReference.ToString());
            Console.WriteLine(|nullableReference|(11).ToString());
        }
    }

    class GenericForReferenceNullable<T> where T : class?
    {
        T nonNullableReference;
        |T?|(12) nullableReference;

        void NullCheck()
        {
            if (nonNullableReference != null) { }
        }

        void AssigningNull()
        {
            nonNullableReference = null;
        }

        void Dereferencing()
        {
            Console.WriteLine(|nonNullableReference|(13).ToString());
        }
    }

    class GenericForValue<T> where T : struct
    {
        T nonNullableValue;
        T? nullableValue;

        void NullCheck()
        {
            if (nullableValue != null) { }
        }

        void AssigningNull()
        {
            nonNullableValue = default;
            nullableValue = default;
        }

        void AssigningNonNullable()
        {
            nullableValue = nonNullableValue;
        }

        void Dereferencing()
        {
            Console.WriteLine(nonNullableValue.ToString());
            Console.WriteLine(nullableValue.ToString());
        }
    }

    class GenericNotNull<T> where T : notnull
    {
        T nonNullable;
        |T?|(14) nullable;

        void NullCheck()
        {
            if (|nonNullable != null|(15)) { }
        }

        void AssigningNull()
        {
            nonNullable = |default|(16);
        }

        void Dereferencing()
        {
            Console.WriteLine(nonNullable.ToString());
        }
    }
}
---------------------------------------------------------
(0): ReSharper Warning: Expression is always true
(1):<overlapped> ReSharper Warning: Expression is always true
(2): ReSharper Warning: Expression is always true
(3): ReSharper Warning: Possible 'null' assignment to entity marked with 'NotNull' attribute
(4): ReSharper Warning: Possible 'null' assignment to entity marked with 'NotNull' attribute
(5): ReSharper Warning: Possible 'System.NullReferenceException'
(6): ReSharper Underlined Error Highlighting: Only non-nullable value type could be underlying of 'System.Nullable'
(7): ReSharper Warning: Possible 'System.NullReferenceException'
(8): ReSharper Warning: Expression is always true
(9): ReSharper Warning: Possible 'null' assignment to entity marked with 'NotNull' attribute
(10): ReSharper Warning: Possible 'null' assignment to entity marked with 'NotNull' attribute
(11): ReSharper Warning: Possible 'System.NullReferenceException'
(12): ReSharper Underlined Error Highlighting: Only non-nullable value type could be underlying of 'System.Nullable'
(13): ReSharper Warning: Possible 'System.NullReferenceException'
(14): ReSharper Underlined Error Highlighting: Only non-nullable value type could be underlying of 'System.Nullable'
(15): ReSharper Warning: Expression is always true
(16): ReSharper Warning: Possible 'null' assignment to entity marked with 'NotNull' attribute
