using System;

namespace ReCommendedExtension.Tests.test.data
{
    public class Simple
    {
        string NonNullableReference { get; set; }
        string? NullableReference { get; set; }

        int NonNullableValue { get; set; }
        int? NullableValue { get; set; }

        void NullCheck()
        {
            if (|NonNullableReference != null|(0)) { }
            if (NullableReference != null) { }
            if (||NonNullableValue != null|(1)|(2)) { }
            if (NullableValue != null) { }
        }

        void AssigningNull()
        {
            NonNullableReference = |null|(3);
            NullableReference = null;
            NonNullableValue = default;
            NullableValue = default;
        }

        void AssigningNonNullable()
        {
            NullableReference = NonNullableReference;
            NullableValue = NonNullableValue;
        }

        void AssigningNullable()
        {
            NonNullableReference = |NullableReference|(4);
        }

        void Dereferencing()
        {
            Console.WriteLine(NonNullableReference.Length);
            Console.WriteLine(|NullableReference|(5).Length);
            Console.WriteLine(NonNullableValue.ToString());
            Console.WriteLine(NullableValue.ToString());
        }
    }

    class Generic<T>
    {
        T NonNullable { get; set; }
        |T?|(6) Nullable { get; set; }

        void NullCheck()
        {
            if (NonNullable != null) { }
        }

        void AssigningNull()
        {
            NonNullable = default;
        }

        void Dereferencing()
        {
            Console.WriteLine(|NonNullable|(7).ToString());
        }
    }

    class GenericForReference<T> where T : class
    {
        T NonNullableReference { get; set; }
        T? NullableReference { get; set; }

        void NullCheck()
        {
            if (|NonNullableReference != null|(8)) { }
            if (NullableReference != null) { }
        }

        void AssigningNull()
        {
            NonNullableReference = |null|(9);
            NullableReference = null;
        }

        void AssigningNonNullable()
        {
            NullableReference = NonNullableReference;
        }

        void AssigningNullable()
        {
            NonNullableReference = |NullableReference|(10);
        }

        void Dereferencing()
        {
            Console.WriteLine(NonNullableReference.ToString());
            Console.WriteLine(|NullableReference|(11).ToString());
        }
    }

    class GenericForReferenceNullable<T> where T : class?
    {
        T NonNullableReference { get; set; }
        |T?|(12) NullableReference { get; set; }

        void NullCheck()
        {
            if (NonNullableReference != null) { }
        }

        void AssigningNull()
        {
            NonNullableReference = null;
        }

        void Dereferencing()
        {
            Console.WriteLine(|NonNullableReference|(13).ToString());
        }
    }

    class GenericForValue<T> where T : struct
    {
        T NonNullableValue { get; set; }
        T? NullableValue { get; set; }

        void NullCheck()
        {
            if (NullableValue != null) { }
        }

        void AssigningNull()
        {
            NonNullableValue = default;
            NullableValue = default;
        }

        void AssigningNonNullable()
        {
            NullableValue = NonNullableValue;
        }

        void Dereferencing()
        {
            Console.WriteLine(NonNullableValue.ToString());
            Console.WriteLine(NullableValue.ToString());
        }
    }

    class GenericNotNull<T> where T : notnull
    {
        T NonNullable { get; set; }
        |T?|(14) Nullable { get; set; }

        void NullCheck()
        {
            if (|NonNullable != null|(15)) { }
        }

        void AssigningNull()
        {
            NonNullable = |default|(16);
        }

        void Dereferencing()
        {
            Console.WriteLine(NonNullable.ToString());
        }
    }
}
---------------------------------------------------------
(0): ReSharper Warning: Expression is always true
(1):<overlapped> ReSharper Warning: Expression is always true
(2): ReSharper Warning: Expression is always true
(3): ReSharper Warning: Possible 'null' assignment to entity marked with 'NotNull' attribute
(4): ReSharper Warning: Possible 'null' assignment to entity marked with 'NotNull' attribute
(5): ReSharper Warning: Possible 'System.NullReferenceException'
(6): ReSharper Underlined Error Highlighting: Only non-nullable value type could be underlying of 'System.Nullable'
(7): ReSharper Warning: Possible 'System.NullReferenceException'
(8): ReSharper Warning: Expression is always true
(9): ReSharper Warning: Possible 'null' assignment to entity marked with 'NotNull' attribute
(10): ReSharper Warning: Possible 'null' assignment to entity marked with 'NotNull' attribute
(11): ReSharper Warning: Possible 'System.NullReferenceException'
(12): ReSharper Underlined Error Highlighting: Only non-nullable value type could be underlying of 'System.Nullable'
(13): ReSharper Warning: Possible 'System.NullReferenceException'
(14): ReSharper Underlined Error Highlighting: Only non-nullable value type could be underlying of 'System.Nullable'
(15): ReSharper Warning: Expression is always true
(16): ReSharper Warning: Possible 'null' assignment to entity marked with 'NotNull' attribute
