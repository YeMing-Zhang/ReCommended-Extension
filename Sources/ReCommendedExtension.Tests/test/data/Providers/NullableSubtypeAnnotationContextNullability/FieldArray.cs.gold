using System;
using System.Linq;

namespace ReCommendedExtension.Tests.test.data
{
    public class Simple
    {
        string[] nonNullableReferences;
        string?[] nullableReferences;
        int[] nonNullableValues;
        int?[] nullableValues;

        void NullCheck_Iteration()
        {
            foreach (var item in nonNullableReferences)
            {
                if (|item != null|(0)) { }
            }
            foreach (var item in nullableReferences)
            {
                if (item != null) { }
            }
            foreach (var item in nonNullableValues)
            {
                if (||item != null|(1)|(2)) { }
            }
            foreach (var item in nullableValues)
            {
                if (item != null) { }
            }
        }

        void NullCheck_Iteration_Indexed()
        {
            for (var i = 0; i < nonNullableReferences.Length; i++)
            {
                if (|nonNullableReferences[i] != null|(3)) { }
            }
            for (var i = 0; i < nullableReferences.Length; i++)
            {
                if (nullableReferences[i] != null) { }
            }
            for (var i = 0; i < nonNullableValues.Length; i++)
            {
                if (||nonNullableValues[i] != null|(4)|(5)) { }
            }
            for (var i = 0; i < nullableValues.Length; i++)
            {
                if (nullableValues[i] != null) { }
            }
        }

        void NullCheck_Linq()
        {
            var query0 = from item in nonNullableReferences where |item != null|(6) select item;
            var query1 = from item in nullableReferences where item != null select item;
            var query2 = from item in nonNullableValues where ||item != null|(7)|(8) select item;
            var query3 = from item in nullableValues where item != null select item;
        }

        void AssigningNull()
        {
            for (var i = 0; i < nonNullableReferences.Length; i++)
            {
                nonNullableReferences[i] = null;
            }
            for (var i = 0; i < nullableReferences.Length; i++)
            {
                nullableReferences[i] = null;
            }
            for (var i = 0; i < nonNullableValues.Length; i++)
            {
                nonNullableValues[i] = default;
            }
            for (var i = 0; i < nullableValues.Length; i++)
            {
                nullableValues[i] = default;
            }
        }

        void AssigningNonNullable()
        {
            for (var i = 0; i < nullableReferences.Length; i++)
            {
                nullableReferences[i] = nonNullableReferences[0];
            }
            for (var i = 0; i < nullableValues.Length; i++)
            {
                nullableValues[i] = nonNullableValues[0];
            }
        }

        void AssigningNullable()
        {
            for (var i = 0; i < nonNullableReferences.Length; i++)
            {
                nonNullableReferences[i] = nullableReferences[0];
            }
        }

        void Dereferencing_Iteration()
        {
            foreach (var item in nonNullableReferences)
            {
                Console.WriteLine(item.Length);
            }
            foreach (var item in nullableReferences)
            {
                Console.WriteLine(|item|(9).Length);
            }
            foreach (var item in nonNullableValues)
            {
                Console.WriteLine(item.ToString());
            }
            foreach (var item in nullableValues)
            {
                Console.WriteLine(item.ToString());
            }
        }

        void Dereferencing_Iteration_Indexed()
        {
            for (var i = 0; i < nonNullableReferences.Length; i++)
            {
                Console.WriteLine(nonNullableReferences[i].Length);
            }
            for (var i = 0; i < nullableReferences.Length; i++)
            {
                Console.WriteLine(|nullableReferences[i]|(10).Length);
            }
            for (var i = 0; i < nonNullableValues.Length; i++)
            {
                Console.WriteLine(nonNullableValues[i].ToString());
            }
            for (var i = 0; i < nullableValues.Length; i++)
            {
                Console.WriteLine(nullableValues[i].ToString());
            }
        }
    }

    class Generic<T>
    {
        T[] any;
        |T?|(11)[] invalid;

        void NullCheck_Iteration()
        {
            foreach (var item in any)
            {
                if (item != null) { }
            }
        }

        void NullCheck_Iteration_Indexed()
        {
            for (var i = 0; i < any.Length; i++)
            {
                if (any[i] != null) { }
            }
        }

        void NullCheck_Linq()
        {
            var query0 = from item in any where item != null select item;
        }

        void AssigningNull()
        {
            for (var i = 0; i < any.Length; i++)
            {
                any[i] = default;
            }
        }

        void Dereferencing_Iteration()
        {
            foreach (var item in any)
            {
                Console.WriteLine(|item|(12).ToString());
            }
        }

        void Dereferencing_Iteration_Indexed()
        {
            for (var i = 0; i < any.Length; i++)
            {
                Console.WriteLine(|any[i]|(13).ToString());
            }
        }
    }

    class GenericForReference<T> where T : class
    {
        T[] nonNullableReferences;
        T?[] nullableReferences;

        void NullCheck_Iteration()
        {
            foreach (var item in nonNullableReferences)
            {
                if (|item != null|(14)) { }
            }
            foreach (var item in nullableReferences)
            {
                if (item != null) { }
            }
        }

        void NullCheck_Iteration_Indexed()
        {
            for (var i = 0; i < nonNullableReferences.Length; i++)
            {
                if (|nonNullableReferences[i] != null|(15)) { }
            }
            for (var i = 0; i < nullableReferences.Length; i++)
            {
                if (nullableReferences[i] != null) { }
            }
        }

        void NullCheck_Linq()
        {
            var query0 = from item in nonNullableReferences where |item != null|(16) select item;
            var query1 = from item in nullableReferences where item != null select item;
        }

        void AssigningNull()
        {
            for (var i = 0; i < nonNullableReferences.Length; i++)
            {
                nonNullableReferences[i] = null;
            }
            for (var i = 0; i < nullableReferences.Length; i++)
            {
                nullableReferences[i] = null;
            }
        }

        void AssigningNonNullable()
        {
            for (var i = 0; i < nullableReferences.Length; i++)
            {
                nullableReferences[i] = nonNullableReferences[0];
            }
        }

        void AssigningNullable()
        {
            for (var i = 0; i < nonNullableReferences.Length; i++)
            {
                nonNullableReferences[i] = nullableReferences[0];
            }
        }

        void Dereferencing_Iteration()
        {
            foreach (var item in nonNullableReferences)
            {
                Console.WriteLine(item.ToString());
            }
            foreach (var item in nullableReferences)
            {
                Console.WriteLine(|item|(17).ToString());
            }
        }

        void Dereferencing_Iteration_Indexed()
        {
            for (var i = 0; i < nonNullableReferences.Length; i++)
            {
                Console.WriteLine(nonNullableReferences[i].ToString());
            }
            for (var i = 0; i < nullableReferences.Length; i++)
            {
                Console.WriteLine(|nullableReferences[i]|(18).ToString());
            }
        }
    }

    class GenericForReferenceNullable<T> where T : class?
    {
        T[] nullableReferences;
        |T?|(19)[] invalidReferences;

        void NullCheck_Iteration()
        {
            foreach (var item in nullableReferences)
            {
                if (item != null) { }
            }
        }

        void NullCheck_Iteration_Indexed()
        {
            for (var i = 0; i < nullableReferences.Length; i++)
            {
                if (nullableReferences[i] != null) { }
            }
        }

        void NullCheck_Linq()
        {
            var query0 = from item in nullableReferences where item != null select item;
        }

        void AssigningNull()
        {
            for (var i = 0; i < nullableReferences.Length; i++)
            {
                nullableReferences[i] = null;
            }
        }

        void Dereferencing_Iteration()
        {
            foreach (var item in nullableReferences)
            {
                Console.WriteLine(|item|(20).ToString());
            }
        }

        void Dereferencing_Iteration_Indexed()
        {
            for (var i = 0; i < nullableReferences.Length; i++)
            {
                Console.WriteLine(|nullableReferences[i]|(21).ToString());
            }
        }
    }

    class GenericForValue<T> where T : struct
    {
        T[] nonNullableValues;
        T?[] nullableValues;

        void NullCheck_Iteration()
        {
            foreach (var item in nullableValues)
            {
                if (item != null) { }
            }
        }

        void NullCheck_Iteration_Indexed()
        {
            for (var i = 0; i < nullableValues.Length; i++)
            {
                if (nullableValues[i] != null) { }
            }
        }

        void NullCheck_Linq()
        {
            var query3 = from item in nullableValues where item != null select item;
        }

        void AssigningNull()
        {
            for (var i = 0; i < nonNullableValues.Length; i++)
            {
                nonNullableValues[i] = default;
            }
            for (var i = 0; i < nullableValues.Length; i++)
            {
                nullableValues[i] = default;
            }
        }

        void AssigningNonNullable()
        {
            for (var i = 0; i < nullableValues.Length; i++)
            {
                nullableValues[i] = nonNullableValues[0];
            }
        }

        void Dereferencing_Iteration()
        {
            foreach (var item in nonNullableValues)
            {
                Console.WriteLine(item.ToString());
            }
            foreach (var item in nullableValues)
            {
                Console.WriteLine(item.ToString());
            }
        }

        void Dereferencing_Iteration_Indexed()
        {
            for (var i = 0; i < nonNullableValues.Length; i++)
            {
                Console.WriteLine(nonNullableValues[i].ToString());
            }
            for (var i = 0; i < nullableValues.Length; i++)
            {
                Console.WriteLine(nullableValues[i].ToString());
            }
        }
    }

    class GenericNotNull<T> where T : notnull
    {
        T[] nonNullables;
        |T?|(22)[] invalid;

        void NullCheck_Iteration()
        {
            foreach (var item in nonNullables)
            {
                if (|item != null|(23)) { }
            }
        }

        void NullCheck_Iteration_Indexed()
        {
            for (var i = 0; i < nonNullables.Length; i++)
            {
                if (|nonNullables[i] != null|(24)) { }
            }
        }

        void NullCheck_Linq()
        {
            var query0 = from item in nonNullables where |item != null|(25) select item;
        }

        void AssigningNull()
        {
            for (var i = 0; i < nonNullables.Length; i++)
            {
                nonNullables[i] = default;
            }
        }

        void Dereferencing_Iteration()
        {
            foreach (var item in nonNullables)
            {
                Console.WriteLine(item.ToString());
            }
        }

        void Dereferencing_Iteration_Indexed()
        {
            for (var i = 0; i < nonNullables.Length; i++)
            {
                Console.WriteLine(nonNullables[i].ToString());
            }
        }
    }
}
---------------------------------------------------------
(0): ReSharper Warning: Expression is always true
(1):<overlapped> ReSharper Warning: Expression is always true
(2): ReSharper Warning: Expression is always true
(3): ReSharper Warning: Expression is always true
(4):<overlapped> ReSharper Warning: Expression is always true
(5): ReSharper Warning: Expression is always true
(6): ReSharper Warning: Expression is always true
(7):<overlapped> ReSharper Warning: Expression is always true
(8): ReSharper Warning: Expression is always true
(9): ReSharper Warning: Possible 'System.NullReferenceException'
(10): ReSharper Warning: Possible 'System.NullReferenceException'
(11): ReSharper Underlined Error Highlighting: Only non-nullable value type could be underlying of 'System.Nullable'
(12): ReSharper Warning: Possible 'System.NullReferenceException'
(13): ReSharper Warning: Possible 'System.NullReferenceException'
(14): ReSharper Warning: Expression is always true
(15): ReSharper Warning: Expression is always true
(16): ReSharper Warning: Expression is always true
(17): ReSharper Warning: Possible 'System.NullReferenceException'
(18): ReSharper Warning: Possible 'System.NullReferenceException'
(19): ReSharper Underlined Error Highlighting: Only non-nullable value type could be underlying of 'System.Nullable'
(20): ReSharper Warning: Possible 'System.NullReferenceException'
(21): ReSharper Warning: Possible 'System.NullReferenceException'
(22): ReSharper Underlined Error Highlighting: Only non-nullable value type could be underlying of 'System.Nullable'
(23): ReSharper Warning: Expression is always true
(24): ReSharper Warning: Expression is always true
(25): ReSharper Warning: Expression is always true
