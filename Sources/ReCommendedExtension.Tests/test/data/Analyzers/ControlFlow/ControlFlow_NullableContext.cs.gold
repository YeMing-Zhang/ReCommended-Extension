using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using JetBrains.Annotations;

namespace Test
{
    internal static class Class
    {
        static string NotNullMethod() => "one";

        static string field = NotNullMethod().|AssertNotNull|(0)();
        static string field_NFO = NotNullMethod()|!|(1);

        static string Property => NotNullMethod().|AssertNotNull|(2)();
        static string Property_NFO => NotNullMethod()|!|(3);

        static Lazy<string?> PropertyLazy => new Lazy<string?>(() => NotNullMethod().|AssertNotNull|(4)());
        static Lazy<string?> PropertyLazy_NFO => new Lazy<string?>(() => NotNullMethod()|!|(5));

        static string? PropertyNullable => null;

        static string Property2 { get; } = NotNullMethod().|AssertNotNull|(6)();
        static string Property2_NFO { get; } = NotNullMethod()|!|(7);

        static string Property3 { get; set; } = NotNullMethod().|AssertNotNull|(8)();
        static string Property3_NFO { get; set; } = NotNullMethod()|!|(9);

        static string Method() => NotNullMethod().|AssertNotNull|(10)();
        static string Method_NFO() => NotNullMethod()|!|(11);

        [DebuggerStepThrough]
        [NotNull]
        static T AssertNotNull<T>(this T value) where T : class
        {
            |AssertThatTrue(value != null)|(12);

            return value;
        }

        class Nested
        {
            string? field = NotNullMethod().|AssertNotNull|(13)();
            string? field_NFO = NotNullMethod()|!|(14);

            string? Property => NotNullMethod().|AssertNotNull|(15)();
            string? Property_NFO => NotNullMethod()|!|(16);

            string? AutoProperty { get; } = NotNullMethod().|AssertNotNull|(17)();
            string? AutoProperty_NFO { get; } = NotNullMethod()|!|(18);
        }

        static void ClassConstraint<T>(T one, T? two) where T : class
        {
            var x = one.|AssertNotNull|(19)();
            var x_NFO = one|!|(20);

            var y = two.AssertNotNull().|AssertNotNull|(21)();
            var y_NFO = two.AssertNotNull()|!|(22);
        }

        static void ClassNullableClassConstraint<T>(T one) where T : class?
        {
            var x = one.AssertNotNull().|AssertNotNull|(23)();
            var x_NFO = one.AssertNotNull()|!|(24);
        }

        static readonly string[] Words = { "one", "two", "three" };

        static readonly Dictionary<int, string> WordMap = new Dictionary<int, string>{ { 1, "one" }, { 2, "two" } };

        static readonly Dictionary<int, string[]> WordMap2 =
            new Dictionary<int, string[]> { { 1, new[] { "one", "two", "three" } }, { 2, new[] { "one", "two", "three" } } };

        static void Iterations()
        {
            var query0 = from word in Words where word.|AssertNotNull|(25)().Length > 2 select word; // "AssertNotNull" must be redundant
            var query0_NFO = from word in Words where word|!|(26).Length > 2 select word; // "!" must be redundant
            var query1 = from word in Words where word != null select word; // "word != null" is always true
            var query2 = from word in Words select word.|AssertNotNull|(27)(); // "AssertNotNull" must be redundant
            var query2_NFO = from word in Words select word|!|(28); // "!" must be redundant

            |AssertThatNotNull(Words)|(29);
            foreach (var word in Words)
            {
                |AssertThatNotNull(word)|(30);
            }

            |AssertThatNotNull(WordMap)|(31);
            foreach (var (key, value) in WordMap)
            {
                |AssertThatNotNull(value)|(32);
            }
            foreach (var value in WordMap.Values)
            {
                |AssertThatNotNull(value)|(33);
            }

            |AssertThatNotNull(WordMap2)|(34);
            foreach (var (key, values) in WordMap2)
            {
                |AssertThatNotNull(values)|(35);
                foreach (var value in values)
                {
                    |AssertThatNotNull(value)|(36);
                }
            }
            foreach (var values in WordMap2.Values)
            {
                |AssertThatNotNull(values)|(37);
                foreach (var value in values)
                {
                    |AssertThatNotNull(value)|(38);
                }
            }
        }

        static void Foo(bool b, object? s, string? x)
        {
            Action action = () =>
            {
                var text = "";
                |AssertThatTrue(text != null)|(39);
                var text2 = text.AssertNotNull().Replace("a", "b");
                |AssertThatTrue(text2 != null)|(40);
            };

            var length = Property.     |AssertNotNull|(41)()         .     |AssertNotNull|(42)()      .Length;
            var qqq = Property.|AssertNotNull|(43)().ToList().All(char.IsDigit);
            var qqq_NFO = Property|!|(44).ToList().All(char.IsDigit);

            if (b)
            {
                if (b) { }

                AssertThatTrue(b); // must be redundant

                Console.WriteLine(b.ToString());
            }
            else
            {
                AssertThatFalse(b); // must be redundant
            }

            if (s is string)
            {
                if (s as string != null) { }
                AssertThatTrue(s as string != null);
                AssertThatFalse(s as string == null);
                AssertThatNotNull(s as string);
            }
            else
            {
                AssertThatNull(s as string);
            }

            if (PropertyNullable != null)
            {
                |AssertThatTrue(PropertyNullable != null)|(45);
            }
            AssertThatFalse(PropertyNullable == null);
            AssertThatNotNull(PropertyNullable);

            |AssertThatTrue(true)|(46);
            |AssertThatFalse(false)|(47);
            |AssertThatNull<string>(null)|(48);

            |AssertThatNotNull(new object())|(49);
            new object().|AssertNotNull|(50)();
            var nfo = new object()|!|(51);

            if (x != null)
            {
                if (x != null)
                {
                    Foo(true, "", null);
                }

                AssertThatTrue(condition: x != null);
                AssertThatTrue(x != null);
                AssertThatTrue(null != x);

                AssertThatFalse(null == x);
                AssertThatFalse(x == null);

                Console.WriteLine(x.ToString());
            }
            else
            {
                AssertThatTrue(condition: x == null);
                AssertThatTrue(x == null);
                AssertThatTrue(null == x);

                AssertThatFalse(null != x);
                AssertThatFalse(x != null);

                AssertThatNull(x);
            }
        }

        static void Foo(string x)
        {
            |AssertThatNotNull(x)|(52);
            x.|AssertNotNull|(53)();

            var y = x|!|(54);
        }

        class A
        {
            public string NotNull { get; set; }

            public string? CanBeNull { get; set; }
        }

        static void NullPropagation1(A? canBeNull) => AssertThatTrue(canBeNull?.NotNull != null);

        static void NullPropagation2(A? canBeNull) => AssertThatNotNull(canBeNull?.NotNull);

        static void NullPropagation3(A? canBeNull) => canBeNull?.NotNull.AssertNotNull();

        static void NullPropagation4(A notNull) => |AssertThatTrue(notNull?.NotNull != null)|(55);

        static void NullPropagation5(A notNull) => |AssertThatNotNull(notNull?.NotNull)|(56);

        static void NullPropagation6(A notNull) => notNull?.NotNull.|AssertNotNull|(57)();
        static void NullPropagation6_NFO(A notNull) => notNull?.NotNull|!|(58);

        static void NullPropagation7(A notNull) => AssertThatTrue(notNull?.CanBeNull != null);

        static void NullPropagation8(A notNull) => AssertThatNotNull(notNull?.CanBeNull);

        static void NullPropagation9(A notNull) => notNull?.CanBeNull.AssertNotNull();

        [AssertionMethod]
        [ContractAnnotation("false => void")]
        static void AssertThatTrue([AssertionCondition(AssertionConditionType.IS_TRUE)] bool condition) => Debug.Assert(condition);

        [AssertionMethod]
        [ContractAnnotation("true => void")]
        static void AssertThatFalse([AssertionCondition(AssertionConditionType.IS_FALSE)] bool condition) => Debug.Assert(!condition);

        [AssertionMethod]
        [ContractAnnotation("notnull => void")]
        static void AssertThatNull<T>([AssertionCondition(AssertionConditionType.IS_NULL)] T reference) where T : class
            => Debug.Assert(reference == null);

        [AssertionMethod]
        [ContractAnnotation("null => void")]
        static void AssertThatNotNull<T>([AssertionCondition(AssertionConditionType.IS_NOT_NULL)] T reference) where T : class
            => |Debug.Assert(reference != null)|(59);
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(1): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(2): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(3): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(4): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(5): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(6): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(7): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(8): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(9): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(10): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(11): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(12): ReSharper Suggestion: Assertion is redundant because the expression is always true.
(13): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(14): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(15): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(16): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(17): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(18): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(19): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(20): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(21): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(22): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(23): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(24): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(25): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(26): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(27): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(28): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(29): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(30): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(31): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(32): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(33): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(34): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(35): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(36): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(37): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(38): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(39): ReSharper Suggestion: Assertion is redundant because the expression is always true.
(40): ReSharper Suggestion: Assertion is redundant because the expression is always true.
(41): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(42): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(43): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(44): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(45): ReSharper Suggestion: Assertion is redundant because the expression is always true.
(46): ReSharper Suggestion: Assertion is redundant because the expression is always true.
(47): ReSharper Suggestion: Assertion is redundant because the expression is always false.
(48): ReSharper Suggestion: Assertion is redundant because the expression is always null.
(49): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(50): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(51): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(52): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(53): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(54): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(55): ReSharper Suggestion: Assertion is redundant because the expression is always true.
(56): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(57): ReSharper Suggestion: Assertion is redundant because the expression is never null.
(58): ReSharper Suggestion: Null-forgiving operator is redundant because the expression is never null.
(59): ReSharper Suggestion: Assertion is redundant because the expression is always true.
